// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum UserRole {
    ADMIN
    USER
}

enum NotificationType {
    NEW_FOLLOWER
    NEW_MESSAGE
    FRIEND_REQUEST
    // Add more notification types as needed
}

enum PostType {
    PHOTO
    CAPTION
    VIDEO
}

model User {
    id            String    @id @default(cuid())
    name          String    @unique
    email         String    @unique
    emailVerified DateTime?
    password      String
    role          UserRole  @default(USER)
    photo         String?   @default("default.png")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @map(name: "updated_at")

    //application specific
    followers     User[]         @relation(name: "Followers")
    follows       User[]         @relation(name: "Followers")
    notifications Notification[]
    posts         Post[]

    @@map(name: "users")
}

model Post {
    id        String   @id @default(cuid())
    content   String
    type      PostType
    imageUrl  String?
    videoUrl  String?
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @map(name: "updated_at")

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    @@index([authorId])
    @@map(name: "posts")
}

model Notification {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    content   String
    userId    String

    user   User             @relation(fields: [userId], references: [id])
    type   NotificationType
    isRead Boolean          @default(false)

    @@index([userId])
}
